{"version":3,"file":"transaction-form.js","sourceRoot":"","sources":["../../../src/client/ui/transaction-form.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAkB,MAAM,4CAA4C,CAAC;AAElF,OAAO,EAAwB,EAAE,EAAE,MAAM,aAAa,CAAC;AAGvD,MAAM,OAAO,eAAe;IAGxB,YAAqB,gBAA0B;QAA1B,qBAAgB,GAAhB,gBAAgB,CAAU;QA4B9B,kBAAa,GAAG,CAAC,KAAY,EAAE,EAAE;YAC9C,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,KAAK,CAAC,MAA0B,CAAC;YAC/D,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YACrE,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC5B,CAAC,CAAC;QA/BE,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;IAED,MAAM,CAAC,IAA8B;QACjC,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC;QACvD,MAAM,kBAAkB,GAAG,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,YAAY,CAAC;QAE9D,OAAO,IAAI,CAAA;;mDAEgC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,IAAI,CAAC;UACtF,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAK,MAAM,EAAK,IAAI,CAAC,aAAa,EAAE,kBAAkB,CAAC;UAC5E,EAAE,CAAC,SAAS,CAAC,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,aAAa,EAAE,kBAAkB,CAAC;UAC5E,EAAE,CAAC,SAAS,CAAC,QAAQ,EAAK,MAAM,EAAK,IAAI,CAAC,aAAa,EAAE,kBAAkB,EAAE,QAAQ,CAAC;UACtF,EAAE,CAAC,MAAM,CAAC,iBAAiB,EAAE,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;;KAEnE,CAAC;IACF,CAAC;IAED,IAAY,SAAS;QACjB,OAAO,CAAC,CAAC,CACL,IAAI,CAAC,WAAW;YAChB,IAAI,CAAC,WAAW,CAAC,MAAM;YACvB,IAAI,CAAC,WAAW,CAAC,MAAM;YACvB,IAAI,CAAC,WAAW,CAAC,SAAS,CAC7B,CAAC;IACN,CAAC;IAQO,kBAAkB,CAAC,KAAY,EAAE,IAA8B;QACnE,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACtC,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;IAEO,SAAS;QACb,IAAI,CAAC,WAAW,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;QACnE,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC5B,CAAC;CACJ","sourcesContent":["import { html, TemplateResult } from '../../../node_modules/lit-html/lit-html.js';\nimport { BlockchainNode, Transaction } from '../lib/blockchain-node.js';\nimport { Callback, Renderable, UI } from './common.js';\n\n\nexport class TransactionForm implements Renderable<Readonly<BlockchainNode>> {\n    private transaction: Transaction;\n\n    constructor(readonly requestRendering: Callback) {\n        this.resetForm();\n    }\n\n    render(node: Readonly<BlockchainNode>): TemplateResult {\n        const { sender, recipient, amount } = this.transaction;\n        const shouldDisableField = node.isMining || node.chainIsEmpty;\n\n        return html`\n      <h2>New transaction</h2>\n      <form class=\"add-transaction-form\" @submit=${event => this.enqueueTransaction(event, node)}>\n        ${UI.formField('sender',    sender,    this.onFieldChange, shouldDisableField)}<span class=\"hidden-xs\">â†’</span>\n        ${UI.formField('recipient', recipient, this.onFieldChange, shouldDisableField)}\n        ${UI.formField('amount',    amount,    this.onFieldChange, shouldDisableField, 'number')}\n        ${UI.button('ADD TRANSACTION', node.isMining || !this.formValid)}\n      </form>\n    `;\n    }\n\n    private get formValid(): boolean {\n        return !!(\n            this.transaction &&\n            this.transaction.sender &&\n            this.transaction.amount &&\n            this.transaction.recipient\n        );\n    }\n\n    private readonly onFieldChange = (event: Event) => {\n        const { type, name, value } = event.target as HTMLInputElement;\n        this.transaction[name] = type === 'number' ? parseInt(value) : value;\n        this.requestRendering();\n    };\n\n    private enqueueTransaction(event: Event, node: Readonly<BlockchainNode>) {\n        event.preventDefault();\n        node.addTransaction(this.transaction);\n        this.resetForm();\n    }\n\n    private resetForm() {\n        this.transaction = { sender: null, recipient: null, amount: null };\n        this.requestRendering();\n    }\n}\n"]}
{"version":3,"file":"blockchain-node.js","sourceRoot":"","sources":["../../../src/client/lib/blockchain-node.ts"],"names":[],"mappings":"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","sourcesContent":["import { sha256 } from './cryptography.js';\nimport { randomDelay } from '../ui/common.js';\n\nconst HASH_REQUIREMENT = '0000';\n\nexport interface Transaction {\n    readonly sender: string;\n    readonly recipient: string;\n    readonly amount: number;\n}\n\nexport interface Block {\n    readonly hash: string;\n    readonly nonce: number;\n    readonly previousHash: string;\n    readonly timestamp: number;\n    readonly transactions: Transaction[];\n}\n\nexport type WithoutHash<T> = Omit<T, 'hash'>;\nexport type NotMinedBlock = Omit<Block, 'hash' | 'nonce'>;\n\nexport class BlockchainNode {\n    private _chain: Block[] = [];\n\n    get chain(): Block[] {\n        return [...this._chain];\n    }\n\n    private _pendingTransactions: Transaction[] = [];\n\n    get pendingTransactions(): Transaction[] {\n        return [...this._pendingTransactions];\n    }\n\n    private _isMining = false;\n\n    get isMining(): boolean {\n        return this._isMining;\n    }\n\n    get chainIsEmpty(): boolean {\n        return this._chain.length === 0;\n    }\n\n    get latestBlock(): Block {\n        return this._chain[this._chain.length - 1];\n    }\n\n    get hasPendingTransactions(): boolean {\n        return this.pendingTransactions.length > 0;\n    }\n\n    get noPendingTransactions(): boolean {\n        return this.pendingTransactions.length === 0;\n    }\n\n    initializeWith(blocks: Block[]): void {\n        this._chain = [...blocks];\n    }\n\n    async initializeWithGenesisBlock(): Promise<void> {\n        const genesisBlock = await this.mineBlock({\n            previousHash: '0',\n            timestamp: Date.now(),\n            transactions: [],\n        });\n        this._chain.push(genesisBlock);\n    }\n\n    async mineBlock(block: NotMinedBlock): Promise<Block> {\n        this._isMining = true;\n        let hash = '';\n        let nonce = 0;\n\n        do {\n            hash = await this.calculateHash({ ...block, nonce: ++nonce });\n        } while (!hash.startsWith(HASH_REQUIREMENT));\n\n        this._isMining = false;\n        this._pendingTransactions = [];\n        return { ...block, hash, nonce };\n    }\n\n    async mineBlockWith(transactions: Transaction[]): Promise<Block> {\n        // NOTE: INTRODUCING A RANDOM DELAY FOR DEMO PURPOSES.\n        // We want to randomize block's timestamp creation so the node that generates transactions\n        // doesn't have an advantage since it's timestamp will always be earlier.\n        await randomDelay(500);\n\n        const block = { previousHash: this.latestBlock.hash, timestamp: Date.now(), transactions };\n        return this.mineBlock(block);\n    }\n\n    addTransaction(transaction: Transaction): void {\n        this._pendingTransactions.push(transaction);\n    }\n\n    /**\n     * Attempts to add a block into the blockchain. The rejected promise carries the reason why the block wasn't added.\n     */\n    async addBlock(newBlock: Block): Promise<void> {\n        const errorMessagePrefix = `⚠️ Block \"${newBlock.hash.substr(0, 8)}\" is rejected`;\n\n        // Find the block after which the new block should be added.\n        const previousBlockIndex = this._chain.findIndex((b) => b.hash === newBlock.previousHash);\n        if (previousBlockIndex < 0) {\n            throw new Error(\n                `${errorMessagePrefix} - there is no block in the chain with the specified previous hash \"${newBlock.previousHash.substr(\n                    0,\n                    8,\n                )}\".`,\n            );\n        }\n\n        // The current node may already have one or more blocks generated (or received from other nodes in the network),\n        // after the one we attempt to add. In this case the longest chain takes precedence and the new block is rejected.\n        const tail = this._chain.slice(previousBlockIndex + 1);\n        if (tail.length >= 1) {\n            throw new Error(\n                `${errorMessagePrefix} - the longer tail of the current node takes precedence over the new block.`,\n            );\n        }\n\n        // Verify the hash of the new block against the hash of the previous block.\n        const newBlockHash = await this.calculateHash(newBlock);\n        const prevBlockHash = this._chain[previousBlockIndex].hash;\n        const newBlockValid =\n            newBlockHash.startsWith(HASH_REQUIREMENT) &&\n            newBlock.previousHash === prevBlockHash &&\n            newBlock.hash === newBlockHash;\n        if (!newBlockValid) {\n            throw new Error(`${errorMessagePrefix} - hash verification has failed.`);\n        }\n\n        // Append the new block at the end of the chain.\n        this._chain = [...this._chain, newBlock];\n    }\n\n    private async calculateHash(block: WithoutHash<Block>): Promise<string> {\n        const data =\n            block.previousHash + block.timestamp + JSON.stringify(block.transactions) + block.nonce;\n        return sha256(data);\n    }\n}\n"]}
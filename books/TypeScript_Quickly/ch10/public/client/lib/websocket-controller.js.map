{"version":3,"file":"websocket-controller.js","sourceRoot":"","sources":["../../../src/client/lib/websocket-controller.ts"],"names":[],"mappings":"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","sourcesContent":["import { Message, MessageTypes, UUID } from '../../shared/messages.js';\nimport { Block, Transaction } from './blockchain-node.js';\nimport { uuid } from './cryptography.js';\n\ninterface PromiseExecutor<T> {\n    resolve: (value?: T | PromiseLike<T>) => void;\n    reject: (reason?: any) => void;\n}\n\nexport class WebsocketController {\n    private websocket: Promise<WebSocket>;\n    private readonly messagesAwaitingReply = new Map<UUID, PromiseExecutor<Message>>();\n\n    constructor(private readonly messagesCallback: (messages: Message) => void) {\n        this.websocket = this.connect();\n    }\n\n    private get url(): string {\n        const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';\n        const hostname = window.location.host;\n        return `${protocol}://${hostname}`;\n    }\n\n    private connect(): Promise<WebSocket> {\n        return new Promise((resolve, reject) => {\n            const ws = new WebSocket(this.url);\n            ws.addEventListener('open', () => resolve(ws));\n            ws.addEventListener('error', err => reject(err));\n            ws.addEventListener('message', this.onMessageReceived);\n        });\n    }\n\n    private readonly onMessageReceived = (event: MessageEvent) => {\n        const message = JSON.parse(event.data) as Message;\n\n        if (this.messagesAwaitingReply.has(message.correlationId)) {\n            this.messagesAwaitingReply.get(message.correlationId).resolve(message);\n            this.messagesAwaitingReply.delete(message.correlationId);\n        } else {\n            this.messagesCallback(message); // an unexpected message from the server\n        }\n    }\n\n    async send(message: Partial<Message>, awaitForReply: boolean = false): Promise<Message> {\n        return new Promise<Message>(async (resolve, reject) => {\n            if (awaitForReply) {\n                this.messagesAwaitingReply.set(message.correlationId, { resolve, reject });\n            }\n            this.websocket.then(\n                ws => ws.send(JSON.stringify(message)),\n                () => this.messagesAwaitingReply.delete(message.correlationId)\n            );\n        });\n    }\n\n    async requestLongestChain(): Promise<Block[]> {\n        const reply = await this.send({\n            type: MessageTypes.GetLongestChainRequest,\n            correlationId: uuid()\n        }, true);\n        return reply.payload;\n    }\n\n    requestNewBlock(transactions: Transaction[]): void {\n        this.send({\n            type: MessageTypes.NewBlockRequest,\n            correlationId: uuid(),\n            payload: transactions\n        });\n    }\n\n    announceNewBlock(block: Block): void {\n        this.send({\n            type: MessageTypes.NewBlockAnnouncement,\n            correlationId: uuid(),\n            payload: block\n        });\n    }\n}\n"]}
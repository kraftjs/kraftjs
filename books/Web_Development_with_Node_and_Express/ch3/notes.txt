Express defaults to a status code of 200 in responses.

app.METHOD takes two arguments: path and function. The path defines the route,
and by default, Express does not care about the case, trailing slash, or any
querystring when performing the match.

So the route for the About page will work for:
/about, /About, /about/, /about?foo=bar, /about/?foo=bar, etc.

_______________________________________________________________________________

response.end() is used to quickly end the response without any data. If you
need to respond with data, instead use res.send() or res.json().

```
res.end();
res.status(404).end();
```
_______________________________________________________________________________

response.type() is used to set the Content-Type of the http header

```
res.type('.html')               // => 'text/html'
res.type('html')                // => 'text/html'
res.type('json')                // => 'application/json'
res.type('application/json')    // => 'application/json'
res.type('png')                 // => 'image/png'
```
_______________________________________________________________________________

response.send() sends the http response. The body parameter can be a Buffer
object, a String, an object, Boolean, or an Array.

This method performs many useful tasks for simple non-streaming responses:
For example, it automatically assigns the Content-Length HTTP response header
field (unless previously defined) and provides automatic HEAD and HTTP cache
freshness support.

```
res.send(Buffer.from('whoop'))                      // Content-Type to application/octet-stream
res.send({ some: 'json' })                          // Content-Type to application/json
res.send('<p>some html</p>')                        // Content-Type to text/html
res.status(404).send('Sorry we cannot find that!')  // Content-Type to text/html
res.status(500).send({ error: 'does not exist' })   // Content-Type to application/json
```
_______________________________________________________________________________

response.json() sends a json response. This method sends a response (with the
application/json content-type) that is the parameter converted to a JSON string
using JSON.stringify().

The parameter can be any JSON type, including object, array, string, Boolean,
number, or null, and you can also use it to convert other values to JSON.

```
res.json(null)
res.json({ user: 'tobi' })
res.status(500).json({ error: 'message' })
```
_______________________________________________________________________________

response.set() sets the response’s HTTP header field to value. To set multiple
fields at once, pass an object as the parameter

```
res.set('Content-Type', 'text/plain')
res.set({
  'Content-Type': 'text/plain',
  'Content-Length': '123',
  ETag: '12345'
})
```
_______________________________________________________________________________

res.status(code) sets the HTTP status for the response. It is a chainable alias
of Node’s response.statusCode

```
res.status(403).end()
res.status(400).send('Bad Request')
res.status(404).sendFile('/absolute/path/to/404.png')
```
_______________________________________________________________________________

res.render(view [, locals] [, callback]) renders a view and sends the rendered
HTML string to the client.

Optional parameters:
- locals, an object whose properties define local variables for the view.
- callback, a callback function. If provided, the method returns both the
  possible error and rendered string, but does not perform an automated
  response. When an error occurs, the method invokes next(err) internally.

The view argument is a string that is the file path of the view file to render.
This can be an absolute path, or a path relative to the views setting. If the
path does not contain a file extension, then the `view engine` setting
determines the file extension. If the path does contain a file extension, then
Express will load the module for the specified template engine (via require())
and render it using the loaded module’s __express function.

```
// send the rendered view to the client
res.render('index')

// if a callback is specified, the rendered HTML string has to be sent explicitly
res.render('index', function (err, html) {
  res.send(html)
})

// pass a local variable to the view
res.render('user', { name: 'Tobi' }, function (err, html) {
  // ...
})
```
_______________________________________________________________________________

